{"version":3,"file":"ScrollSmoother.min.js","sources":["../src/ScrollSmoother.js"],"sourcesContent":["/*!\n * ScrollSmoother 3.10.2\n * https://greensock.com\n *\n * @license Copyright 2008-2022, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\n\nlet gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _toArray, _clamp, ScrollTrigger, _mainInstance, _expo, _getVelocityProp,\n\t_windowExists = () => typeof(window) !== \"undefined\",\n\t_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),\n\t_bonusValidated = 1, //<name>ScrollSmoother</name>\n\t_isViewport = e => !!~_root.indexOf(e),\n\t_getTime = Date.now,\n\t_round = value => Math.round(value * 100000) / 100000 || 0,\n\t_autoDistance = (el, progress) => { // for calculating the distance (and offset) for elements with speed: \"auto\". Progress is for if it's \"above the fold\" (negative start position), so we can crop as little as possible.\n\t\tlet parent = el.parentNode || _docEl,\n\t\t\tb1 = el.getBoundingClientRect(),\n\t\t\tb2 = parent.getBoundingClientRect(),\n\t\t\tgapTop = b2.top - b1.top,\n\t\t\tgapBottom = b2.bottom - b1.bottom,\n\t\t\tchange = (Math.abs(gapTop) > Math.abs(gapBottom) ? gapTop : gapBottom) / (1 - progress),\n\t\t\toffset = -change * progress,\n\t\t\tratio, extraChange;\n\t\tif (change > 0) { // if the image starts at the BOTTOM of the container, adjust things so that it shows as much of the image as possible while still covering.\n\t\t\tratio = b2.height / (_win.innerHeight + b2.height);\n\t\t\textraChange = ratio === 0.5 ? b2.height * 2 : Math.min(b2.height, -change * ratio / (2 * ratio - 1)) * 2;\n\t\t\toffset += -extraChange / 2; // whatever the offset, we must double that in the opposite direction to compensate.\n\t\t\tchange += extraChange;\n\t\t}\n\t\treturn {change, offset};\n\t},\n\t_wrap = el => {\n\t\tlet wrapper = _doc.createElement(\"div\");\n\t\twrapper.classList.add(\"ScrollSmoother-wrapper\");\n\t\tel.parentNode.insertBefore(wrapper, el);\n\t\twrapper.appendChild(el);\n\t\treturn wrapper;\n\t};\n\nexport class ScrollSmoother {\n\n\tconstructor(vars) {\n\t\t_coreInitted || ScrollSmoother.register(gsap) || console.warn(\"Please gsap.registerPlugin(ScrollSmoother)\");\n\t\tvars = this.vars = vars || {};\n\n\t\t_mainInstance && _mainInstance.kill();\n\t\t_mainInstance = this;\n\n\t\tlet content, wrapper, height, mainST, effects, intervalID, wrapperCSS, contentCSS, paused, pausedNormalizer,\n\t\t\tscrollFunc = ScrollTrigger.getScrollFunc(_win),\n\t\t\tsmoothDuration = ScrollTrigger.isTouch === 1 ? (vars.smoothTouch === true ? 0.8 : parseFloat(vars.smoothTouch) || 0) : (vars.smooth === 0 || vars.smooth === false) ? 0 : parseFloat(vars.smooth) || 0.8,\n\t\t\tcurrentY = 0,\n\t\t\tdelta = 0,\n\t\t\tstartupPhase = 1,\n\t\t\tonUpdate = vars.onUpdate,\n\t\t\tonStop = vars.onStop,\n\t\t\ttracker = _getVelocityProp(0),\n\t\t\tupdateVelocity = () => tracker.update(-currentY),\n\t\t\tscroll = {y: 0},\n\t\t\tremoveScroll = () => content.style.overflow = \"visible\",\n\t\t\tisProxyScrolling,\n\t\t\tkillScrub = trigger => {\n\t\t\t\tlet scrub = trigger.getTween();\n\t\t\t\tif (scrub) {\n\t\t\t\t\tscrub.pause();\n\t\t\t\t\tscrub._time = scrub._dur; // force the playhead to completion without rendering just so that when it resumes, it doesn't jump back in the .resetTo().\n\t\t\t\t\tscrub._tTime = scrub._tDur;\n\t\t\t\t}\n\t\t\t\tisProxyScrolling = false;\n\t\t\t\ttrigger.animation.progress(trigger.progress, true);\n\t\t\t},\n\t\t\trender = (y, force) => {\n\t\t\t\tif ((y !== currentY && !paused) || force) {\n\t\t\t\t\tsmoothDuration && (content.style.transform = \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, \" + y + \", 0, 1)\");\n\t\t\t\t\t//smoothDuration && (content.style.transform = \"translateY(\" + y + \"px)\"); // NOTE: when we used matrix3d() or set will-change: transform, it performed noticeably worse on iOS counter-intuitively!\n\t\t\t\t\tdelta = y - currentY;\n\t\t\t\t\tcurrentY = y;\n\t\t\t\t\tScrollTrigger.isUpdating || ScrollTrigger.update();\n\t\t\t\t}\n\t\t\t},\n\t\t\tscrollTop = function(value) {\n\t\t\t\tif (arguments.length) {\n\t\t\t\t\tpaused && (currentY = -value);\n\t\t\t\t\tscroll.y = -value;\n\t\t\t\t\tisProxyScrolling = true; // otherwise, if snapping was applied (or anything that attempted to SET the scroll proxy's scroll position), we'd set the scroll here which would then (on the next tick) update the content tween/ScrollTrigger which would try to smoothly animate to that new value, thus the scrub tween would impede the progress. So we use this flag to respond accordingly in the ScrollTrigger's onUpdate and effectively force the scrub to its end immediately.\n\t\t\t\t\tscrollFunc(value);\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\treturn -currentY;\n\t\t\t},\n\t\t\tlastFocusElement, // if the user clicks a button that scrolls the page, for example, then unfocuses the window and comes back and activates the window/tab again, it'll want to focus back on that same button element but in that case we should skip it. Only jump there when a new element gets focus, like tabbing for accessibility.\n\t\t\tonFocusIn = e => { // when the focus changes, make sure that element is on-screen\n\t\t\t\twrapper.scrollTop = 0;\n\t\t\t\tScrollTrigger.isInViewport(e.target) || (e.target === lastFocusElement) ||  this.scrollTo(e.target, false, \"center center\");\n\t\t\t\tlastFocusElement = e.target;\n\t\t\t},\n\t\t\tadjustParallaxPosition = (triggers, createdAfterEffectWasApplied) => {\n\t\t\t\tlet pins, start, dif, markers;\n\t\t\t\teffects.forEach(st => {\n\t\t\t\t\tpins = st.pins;\n\t\t\t\t\tmarkers = st.markers;\n\t\t\t\t\ttriggers.forEach(trig => {\n\t\t\t\t\t\tif ((trig.trigger === st.trigger || trig.pinnedContainer === st.trigger) && st !== trig) {\n\t\t\t\t\t\t\tstart = trig.start;\n\t\t\t\t\t\t\tdif = (start - st.start - st.offset) / st.ratio - (start - st.start);\n\t\t\t\t\t\t\t// createdAfterEffectWasApplied && (dif -= (gsap.getProperty(st.trigger, \"y\") - st.startY) / st.ratio); // the effect applied a y offset, so if the ScrollTrigger was created after that, it'll be based on that position so we must compensate. Later we added code to ScrollTrigger to roll back in this situation anyway, so this isn't necessary. Saving it in case a situation arises where it comes in handy.\n\t\t\t\t\t\t\tpins.forEach(p => dif -= p.distance / st.ratio - p.distance);\n\t\t\t\t\t\t\ttrig.setPositions(start + dif, trig.end + dif);\n\t\t\t\t\t\t\ttrig.markerStart && markers.push(gsap.quickSetter([trig.markerStart, trig.markerEnd], \"y\", \"px\"));\n\t\t\t\t\t\t\tif (trig.pin && trig.end > 0) {\n\t\t\t\t\t\t\t\tdif = trig.end - trig.start;\n\t\t\t\t\t\t\t\tpins.push({start: trig.start, end: trig.end, distance: dif, trig: trig});\n\t\t\t\t\t\t\t\tst.setPositions(st.start, st.end + dif);\n\t\t\t\t\t\t\t\tst.vars.onRefresh(st);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\tonRefresh = () => {\n\t\t\t\tremoveScroll();\n\t\t\t\trequestAnimationFrame(removeScroll);\n\t\t\t\tif (effects) { // adjust all the effect start/end positions including any pins!\n\t\t\t\t\teffects.forEach(st => {\n\t\t\t\t\t\tlet start = st.start,\n\t\t\t\t\t\t\tend = st.auto ? Math.min(ScrollTrigger.maxScroll(st.scroller), st.end) : start + (st.end - start) / st.ratio,\n\t\t\t\t\t\t\toffset = (end - st.end) / 2; // we split the difference so that it reaches its natural position in the MIDDLE of the viewport\n\t\t\t\t\t\tstart -= offset;\n\t\t\t\t\t\tend -= offset;\n\t\t\t\t\t\tst.offset = offset || 0.0001; // we assign at least a tiny value because we check in the onUpdate for .offset being set in order to apply values.\n\t\t\t\t\t\tst.pins.length = 0;\n\t\t\t\t\t\tst.setPositions(Math.min(start, end), Math.max(start, end));\n\t\t\t\t\t\tst.vars.onRefresh(st);\n\t\t\t\t\t});\n\t\t\t\t\tadjustParallaxPosition(ScrollTrigger.sort());\n\t\t\t\t}\n\t\t\t\ttracker.reset();\n\t\t\t},\n\t\t\trestoreEffects = () => effects && effects.forEach(st => st.vars.onRefresh(st)),\n\t\t\trevertEffects = () => {\n\t\t\t\teffects && effects.forEach(st => st.vars.onRefreshInit(st));\n\t\t\t\treturn restoreEffects;\n\t\t\t},\n\t\t\teffectValueGetter = (name, value, index, el) => {\n\t\t\t\treturn () => {\n\t\t\t\t\tlet v = typeof(value) === \"function\" ? value(index, el) : value;\n\t\t\t\t\tv || v === 0 || (v = el.getAttribute(\"data-\" + name) || (name === \"speed\" ? 1 : 0));\n\t\t\t\t\tel.setAttribute(\"data-\" + name, v);\n\t\t\t\t\treturn v === \"auto\" ? v : parseFloat(v);\n\t\t\t\t};\n\t\t\t},\n\t\t\tcreateEffect = (el, speed, lag, index) => {\n\t\t\t\tlet getSpeed = effectValueGetter(\"speed\", speed, index, el),\n\t\t\t\t\tgetLag = effectValueGetter(\"lag\", lag, index, el),\n\t\t\t\t\tstartY = gsap.getProperty(el, \"y\"),\n\t\t\t\t\tcache = el._gsap,\n\t\t\t\t\tratio, st, autoSpeed, scrub, progressOffset, yOffset,\n\t\t\t\t\tinitDynamicValues = () => {\n\t\t\t\t\t\tspeed = getSpeed();\n\t\t\t\t\t\tlag = getLag();\n\t\t\t\t\t\tratio = parseFloat(speed) || 1;\n\t\t\t\t\t\tautoSpeed = speed === \"auto\";\n\t\t\t\t\t\tprogressOffset = autoSpeed ? 0 : 0.5;\n\t\t\t\t\t\tscrub && scrub.kill();\n\t\t\t\t\t\tscrub = lag && gsap.to(el, {ease: _expo, overwrite: false, y: \"+=0\", duration: lag});\n\t\t\t\t\t\tif (st) {\n\t\t\t\t\t\t\tst.ratio = ratio;\n\t\t\t\t\t\t\tst.autoSpeed = autoSpeed;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\trevert = () => {\n\t\t\t\t\t\tcache.y = startY + \"px\";\n\t\t\t\t\t\tcache.renderTransform(1);\n\t\t\t\t\t\tinitDynamicValues();\n\t\t\t\t\t},\n\t\t\t\t\tpins = [],\n\t\t\t\t\tmarkers = [],\n\t\t\t\t\tchange = 0,\n\t\t\t\t\tupdateChange = self => {\n\t\t\t\t\t\tif (autoSpeed) {\n\t\t\t\t\t\t\trevert();\n\t\t\t\t\t\t\tlet auto = _autoDistance(el, _clamp(0, 1, -self.start / (self.end - self.start)));\n\t\t\t\t\t\t\tchange = auto.change;\n\t\t\t\t\t\t\tyOffset = auto.offset;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchange = (self.end - self.start) * (1 - ratio);\n\t\t\t\t\t\t\tyOffset = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpins.forEach(p => change -= p.distance * (1 - ratio));\n\t\t\t\t\t\tself.vars.onUpdate(self);\n\t\t\t\t\t\tscrub && scrub.progress(1);\n\t\t\t\t\t};\n\t\t\t\tinitDynamicValues();\n\t\t\t\tif (ratio !== 1 || autoSpeed || scrub) {\n\t\t\t\t\tst = ScrollTrigger.create({\n\t\t\t\t\t\ttrigger: autoSpeed ? el.parentNode : el,\n\t\t\t\t\t\tscroller: wrapper,\n\t\t\t\t\t\tscrub: true,\n\t\t\t\t\t\trefreshPriority: -999, // must update AFTER any other ScrollTrigger pins\n\t\t\t\t\t\tonRefreshInit: revert,\n\t\t\t\t\t\tonRefresh: updateChange,\n\t\t\t\t\t\tonKill: self => {\n\t\t\t\t\t\t\tlet i = effects.indexOf(self);\n\t\t\t\t\t\t\ti >= 0 && effects.splice(i, 1);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonUpdate: self => {\n\t\t\t\t\t\t\tlet y = startY + change * (self.progress - progressOffset),\n\t\t\t\t\t\t\t\ti = pins.length,\n\t\t\t\t\t\t\t\textraY = 0,\n\t\t\t\t\t\t\t\tpin, scrollY, end;\n\t\t\t\t\t\t\tif (self.offset) { // wait until the effects are adjusted.\n\t\t\t\t\t\t\t\tif (i) { // pinning must be handled in a special way because when pinned, slope changes to 1.\n\t\t\t\t\t\t\t\t\tscrollY = -scroll.y;\n\t\t\t\t\t\t\t\t\tend = self.end;\n\t\t\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\t\t\tpin = pins[i];\n\t\t\t\t\t\t\t\t\t\tif (pin.trig.isActive || (scrollY >= pin.start && scrollY <= pin.end)) { // currently pinned so no need to set anything\n\t\t\t\t\t\t\t\t\t\t\tif (scrub) {\n\t\t\t\t\t\t\t\t\t\t\t\tpin.trig.progress += pin.trig.direction < 0 ? 0.001 : -0.001; // just to make absolutely sure that it renders (if the progress didn't change, it'll skip)\n\t\t\t\t\t\t\t\t\t\t\t\tpin.trig.update(0, 0, 1);\n\t\t\t\t\t\t\t\t\t\t\t\tscrub.resetTo(\"y\", parseFloat(cache.y), -delta, true);\n\t\t\t\t\t\t\t\t\t\t\t\tstartupPhase && scrub.progress(1);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t(scrollY > pin.end) && (extraY += pin.distance);\n\t\t\t\t\t\t\t\t\t\tend -= pin.distance;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\ty = startY + extraY + change * (((gsap.utils.clamp(self.start, self.end, scrollY) - self.start - extraY) / (end - self.start)) - progressOffset);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ty = _round(y + yOffset);\n\t\t\t\t\t\t\t\tmarkers.length && !autoSpeed && markers.forEach(setter => setter(y - extraY));\n\t\t\t\t\t\t\t\tif (scrub) {\n\t\t\t\t\t\t\t\t\tscrub.resetTo(\"y\", y, -delta, true);\n\t\t\t\t\t\t\t\t\tstartupPhase && scrub.progress(1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcache.y = y + \"px\";\n\t\t\t\t\t\t\t\t\tcache.renderTransform(1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tupdateChange(st);\n\t\t\t\t\tgsap.core.getCache(st.trigger).stRevert = revertEffects; // if user calls ScrollSmoother.create() with effects and THEN creates a ScrollTrigger on the same trigger element, the effect would throw off the start/end positions thus we needed a way to revert things when creating a new ScrollTrigger in that scenario, so we use this stRevert property of the GSCache inside ScrollTrigger.\n\t\t\t\t\tst.startY = startY;\n\t\t\t\t\tst.pins = pins;\n\t\t\t\t\tst.markers = markers;\n\t\t\t\t\tst.ratio = ratio;\n\t\t\t\t\tst.autoSpeed = autoSpeed;\n\t\t\t\t\tel.style.willChange = \"transform\";\n\t\t\t\t}\n\t\t\t\treturn st;\n\t\t\t};\n\n\t\tScrollTrigger.addEventListener(\"refresh\", onRefresh);\n\t\tgsap.delayedCall(0.5, () => startupPhase = 0);\n\n\t\tthis.scrollTop = scrollTop;\n\n\t\tthis.scrollTo = (target, smooth, position) => {\n\t\t\tlet p = gsap.utils.clamp(0, ScrollTrigger.maxScroll(_win), isNaN(target) ? this.offset(target, position) : +target);\n\t\t\t!smooth ? scrollTop(p) : paused ? gsap.to(this, {duration: smoothDuration, scrollTop: p, overwrite: \"auto\", ease: _expo}) : scrollFunc(p);\n\t\t};\n\n\t\tthis.offset = (target, position) => {\n\t\t\ttarget = _toArray(target)[0];\n\t\t\tlet oldY = gsap.getProperty(target, \"y\"), // because if there's an effect applied, we revert(). We need to restore.\n\t\t\t\tst = ScrollTrigger.create({trigger: target, start: position || \"top top\"}),\n\t\t\t\ty;\n\t\t\teffects && adjustParallaxPosition([st], true);\n\t\t\ty = st.start;\n\t\t\tst.kill(false);\n\t\t\tgsap.set(target, {y: oldY});\n\t\t\treturn y;\n\t\t};\n\n\t\tfunction refreshHeight() {\n\t\t\theight = content.clientHeight;\n\t\t\tcontent.style.overflow = \"visible\"\n\t\t\t_body.style.height = height + \"px\";\n\t\t\treturn height - _win.innerHeight;\n\t\t}\n\n\t\tthis.content = function(element) {\n\t\t\tif (arguments.length) {\n\t\t\t\tcontent = _toArray(element || \"#smooth-content\")[0] || _body.children[0];\n\t\t\t\tcontentCSS = content.getAttribute(\"style\") || \"\";\n\t\t\t\tgsap.set(content, {overflow: \"visible\", width: \"100%\"});\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\treturn content;\n\t\t}\n\n\t\tthis.wrapper = function(element) {\n\t\t\tif (arguments.length) {\n\t\t\t\twrapper = _toArray(element || \"#smooth-wrapper\")[0] || _wrap(content);\n\t\t\t\twrapperCSS = wrapper.getAttribute(\"style\") || \"\";\n\t\t\t\trefreshHeight();\n\t\t\t\tgsap.set(wrapper, smoothDuration ? {overflow: \"hidden\", position: \"fixed\", height: \"100%\", width: \"100%\", top: 0, left: 0, right: 0, bottom: 0} : {overflow: \"visible\", position: \"relative\", width: \"100%\", height: \"auto\", top: \"auto\", bottom: \"auto\", left: \"auto\", right: \"auto\"});\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\treturn wrapper;\n\t\t}\n\n\t\tthis.effects = (targets, config) => {\n\t\t\teffects || (effects = []);\n\t\t\tif (!targets) {\n\t\t\t\treturn effects.slice(0);\n\t\t\t}\n\t\t\ttargets = _toArray(targets);\n\t\t\ttargets.forEach(target => {\n\t\t\t\tlet i = effects.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tif (effects[i].trigger === target) {\n\t\t\t\t\t\teffects[i].kill();\n\t\t\t\t\t\teffects.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tconfig = config || {};\n\t\t\tlet {speed, lag} = config,\n\t\t\t\teffectsToAdd = [],\n\t\t\t\ti, st;\n\t\t\tfor (i = 0; i < targets.length; i++) {\n\t\t\t\tst = createEffect(targets[i], speed, lag, i);\n\t\t\t\tst && effectsToAdd.push(st);\n\t\t\t}\n\t\t\teffects.push(...effectsToAdd);\n\t\t\treturn effectsToAdd;\n\t\t};\n\n\t\tthis.content(vars.content);\n\t\tthis.wrapper(vars.wrapper);\n\t\tthis.render = y => render(y || y === 0 ? y : currentY);\n\t\tthis.getVelocity = () => tracker.getVelocity(-currentY);\n\n\t\tScrollTrigger.scrollerProxy(wrapper, {\n\t\t\tscrollTop: scrollTop,\n\t\t\tscrollHeight: () => _body.scrollHeight,\n\t\t\tfixedMarkers: vars.fixedMarkers !== false && !!smoothDuration,\n\t\t\tcontent: content,\n\t\t\tgetBoundingClientRect() {\n\t\t\t\treturn {top: 0, left: 0, width: _win.innerWidth, height: _win.innerHeight};\n\t\t\t}\n\t\t});\n\t\tScrollTrigger.defaults({scroller: wrapper});\n\t\tlet existingScrollTriggers = ScrollTrigger.getAll().filter(st => st.scroller === _win || st.scroller === wrapper);\n\t\texistingScrollTriggers.forEach(st => st.revert(true)) // in case it's in an environment like React where child components that have ScrollTriggers instantiate BEFORE the parent that does ScrollSmoother.create(...);\n\n\t\tmainST = ScrollTrigger.create({\n\t\t\tanimation: gsap.to(scroll, {\n\t\t\t\ty: () => _win.innerHeight - height,\n\t\t\t\tease: \"none\",\n\t\t\t\tdata: \"ScrollSmoother\",\n\t\t\t\tduration: 100, // for added precision\n\t\t\t\tonUpdate: () => {\n\t\t\t\t\tlet force = isProxyScrolling;\n\t\t\t\t\tif (force) {\n\t\t\t\t\t\tscroll.y = currentY;\n\t\t\t\t\t\tkillScrub(mainST);\n\t\t\t\t\t}\n\t\t\t\t\trender(scroll.y, force);\n\t\t\t\t\tupdateVelocity();\n\t\t\t\t\tonUpdate && !paused && onUpdate(this);\n\t\t\t\t}\n\t\t\t}),\n\t\t\tonRefreshInit: () => scroll.y = 0,\n\t\t\tid: \"ScrollSmoother\",\n\t\t\tscroller: _win,\n\t\t\tinvalidateOnRefresh: true,\n\t\t\tstart: 0,\n\t\t\trefreshPriority: -9999, // because all other pins, etc. should be calculated first before this figures out the height of the body. BUT this should also update FIRST so that the scroll position on the proxy is up-to-date when all the ScrollTriggers calculate their progress! -9999 is a special number that ScrollTrigger looks for to handle in this way.\n\t\t\tend: refreshHeight,\n\t\t\tonScrubComplete: () => {\n\t\t\t\ttracker.reset();\n\t\t\t\tonStop && onStop(this);\n\t\t\t},\n\t\t\tscrub: smoothDuration || true,\n\t\t\tonRefresh: self => {\n\t\t\t\tkillScrub(self);\n\t\t\t\trender(scroll.y);\n\t\t\t}\n\t\t});\n\n\t\tthis.smooth = function(value) {\n\t\t\tsmoothDuration = value;\n\t\t\treturn arguments.length ? mainST.scrubDuration(value) : mainST.getTween() ? mainST.getTween().duration() : 0;\n\t\t};\n\n\t\tmainST.getTween() && (mainST.getTween().vars.ease = vars.ease || _expo);\n\n\t\tthis.scrollTrigger = mainST;\n\n\t\tvars.effects && this.effects(vars.effects === true ? \"[data-speed], [data-lag]\" : vars.effects, {});\n\n\t\texistingScrollTriggers.forEach(st => {\n\t\t\tst.vars.scroller = wrapper;\n\t\t\tst.init(st.vars, st.animation);\n\t\t});\n\n\t\tthis.paused = function(value) {\n\t\t\tif (arguments.length) {\n\t\t\t\tif (!!paused !== value) {\n\t\t\t\t\tif (value) { // pause\n\t\t\t\t\t\tmainST.getTween() && mainST.getTween().pause();\n\t\t\t\t\t\tscrollFunc(-currentY);\n\t\t\t\t\t\ttracker.reset();\n\t\t\t\t\t\tpausedNormalizer = ScrollTrigger.normalizeScroll();\n\t\t\t\t\t\tpausedNormalizer && pausedNormalizer.disable(); // otherwise the normalizer would try to scroll the page on things like wheel events.\n\t\t\t\t\t\tpaused = ScrollTrigger.observe({\n\t\t\t\t\t\t\tpreventDefault: true,\n\t\t\t\t\t\t\ttype: \"wheel,touch,scroll\",\n\t\t\t\t\t\t\tdebounce: false,\n\t\t\t\t\t\t\tonChangeY: () => scrollTop(-currentY) // refuse to scroll\n\t\t\t\t\t\t});\n\t\t\t\t\t} else { // resume\n\t\t\t\t\t\tpaused.kill();\n\t\t\t\t\t\tpaused = 0;\n\t\t\t\t\t\tpausedNormalizer && pausedNormalizer.enable();\n\t\t\t\t\t\tmainST.progress = (-currentY - mainST.start) / (mainST.end - mainST.start);\n\t\t\t\t\t\tkillScrub(mainST);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\treturn !!paused;\n\t\t};\n\n\t\tthis.kill = () => {\n\t\t\tthis.paused(false);\n\t\t\tkillScrub(mainST);\n\t\t\tmainST.kill();\n\t\t\tlet i = effects ? effects.length : 0;\n\t\t\twhile (i--) { // make sure we go backwards because the onKill() will effects.splice(index, 1) and we don't want to skip\n\t\t\t\teffects[i].kill();\n\t\t\t}\n\t\t\tScrollTrigger.scrollerProxy(wrapper);\n\t\t\tScrollTrigger.removeEventListener(\"refresh\", onRefresh);\n\t\t\twrapper.style.cssText = wrapperCSS;\n\t\t\tcontent.style.cssText = contentCSS;\n\t\t\tlet defaults = ScrollTrigger.defaults({});\n\t\t\tdefaults && defaults.scroller === wrapper && ScrollTrigger.defaults({scroller: _win});\n\t\t\tthis.observer && ScrollTrigger.normalizeScroll(false);\n\t\t\tclearInterval(intervalID);\n\t\t\t_mainInstance = null;\n\t\t\t_win.removeEventListener(\"focusin\", onFocusIn);\n\t\t}\n\n\t\tvars.normalizeScroll && (this.observer = ScrollTrigger.normalizeScroll({ debounce: true }));\n\t\tScrollTrigger.config(vars); // in case user passes in ignoreMobileResize for example\n\t\t(\"overscrollBehavior\" in _win.getComputedStyle(_body)) && gsap.set(_body, {overscrollBehavior: \"none\"});\n\n\t\t// if the user hits the tab key (or whatever) to shift focus to an element that's off-screen, center that element.\n\t\t_win.addEventListener(\"focusin\", onFocusIn);\n\n\t\tintervalID = setInterval(updateVelocity, 250);\n\n\t\t_doc.readyState === \"loading\" || requestAnimationFrame(() => ScrollTrigger.refresh());\n\n\t}\n\n\tget progress() {\n\t\treturn this.scrollTrigger.animation._time / 100;\n\t}\n\n\n\tstatic register(core) {\n\t\tif (!_coreInitted) {\n\t\t\tgsap = core || _getGSAP();\n\t\t\tif (_windowExists() && window.document) {\n\t\t\t\t_win = window;\n\t\t\t\t_doc = document;\n\t\t\t\t_docEl = _doc.documentElement;\n\t\t\t\t_body = _doc.body;\n\t\t\t}\n\t\t\tif (gsap) {\n\t\t\t\t_toArray = gsap.utils.toArray;\n\t\t\t\t_clamp = gsap.utils.clamp;\n\t\t\t\t_expo = gsap.parseEase(\"expo\");\n\t\t\t\tScrollTrigger = gsap.core.globals().ScrollTrigger;\n\t\t\t\tgsap.core.globals(\"ScrollSmoother\", ScrollSmoother); // must register the global manually because in Internet Explorer, functions (classes) don't have a \"name\" property.\n\t\t\t//\tgsap.ticker.lagSmoothing(50, 100); // generally people don't want things to jump (honoring smoothness over time is better with smooth scrolling)\n\t\t\t\tif (_body && ScrollTrigger) {\n\t\t\t\t\t_root = [_win, _doc, _docEl, _body];\n\t\t\t\t\t_getVelocityProp = ScrollTrigger.core._getVelocityProp;\n\t\t\t\t\t_coreInitted = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn _coreInitted;\n\t}\n\n\n}\n\nScrollSmoother.version = \"3.10.2\";\nScrollSmoother.create = vars => (_mainInstance && vars && _mainInstance.content() === _toArray(vars.content)[0]) ? _mainInstance : new ScrollSmoother(vars);\nScrollSmoother.get = () => _mainInstance;\n\n_getGSAP() && gsap.registerPlugin(ScrollSmoother);\n\nexport { ScrollSmoother as default };"],"names":["_windowExists","window","_getGSAP","gsap","registerPlugin","_coreInitted","_win","_doc","_docEl","_body","_toArray","_clamp","ScrollTrigger","_mainInstance","_expo","_getVelocityProp","ScrollSmoother","register","core","document","documentElement","body","utils","toArray","clamp","parseEase","globals","this","scrollTrigger","animation","_time","vars","console","warn","kill","updateVelocity","tracker","update","currentY","removeScroll","content","style","overflow","killScrub","trigger","scrub","getTween","pause","_dur","_tTime","_tDur","isProxyScrolling","progress","render","y","force","paused","smoothDuration","transform","delta","isUpdating","scrollTop","value","arguments","length","scroll","scrollFunc","onFocusIn","e","wrapper","isInViewport","target","lastFocusElement","_this","scrollTo","adjustParallaxPosition","triggers","pins","start","dif","markers","effects","forEach","st","trig","pinnedContainer","offset","ratio","p","distance","setPositions","end","markerStart","push","quickSetter","markerEnd","pin","onRefresh","requestAnimationFrame","auto","Math","min","maxScroll","scroller","max","sort","reset","restoreEffects","revertEffects","onRefreshInit","effectValueGetter","name","index","el","v","getAttribute","setAttribute","parseFloat","createEffect","speed","lag","initDynamicValues","getSpeed","getLag","progressOffset","autoSpeed","to","ease","overwrite","duration","revert","cache","startY","renderTransform","updateChange","self","_autoDistance","extraChange","parent","parentNode","b1","getBoundingClientRect","b2","gapTop","top","gapBottom","bottom","change","abs","height","innerHeight","yOffset","onUpdate","getProperty","_gsap","create","refreshPriority","onKill","i","indexOf","splice","scrollY","extraY","isActive","direction","resetTo","startupPhase","_round","round","setter","getCache","stRevert","willChange","mainST","intervalID","wrapperCSS","contentCSS","pausedNormalizer","getScrollFunc","isTouch","smoothTouch","smooth","onStop","refreshHeight","clientHeight","addEventListener","delayedCall","position","isNaN","oldY","set","element","children","width","_wrap","createElement","classList","add","insertBefore","appendChild","left","right","targets","config","slice","effectsToAdd","getVelocity","scrollerProxy","scrollHeight","fixedMarkers","innerWidth","defaults","existingScrollTriggers","getAll","filter","data","id","invalidateOnRefresh","onScrubComplete","scrubDuration","init","normalizeScroll","disable","observe","preventDefault","type","debounce","onChangeY","enable","removeEventListener","cssText","observer","clearInterval","getComputedStyle","overscrollBehavior","setInterval","readyState","refresh","version","get"],"mappings":";;;;;;;;;mYAYiB,SAAhBA,UAAyC,oBAAZC,OAClB,SAAXC,WAAiBC,GAASH,MAAoBG,EAAOF,OAAOE,OAASA,EAAKC,gBAAkBD,MAFzFA,EAAME,EAAcC,EAAMC,EAAMC,EAAQC,EAAcC,EAAUC,EAAQC,EAAeC,EAAeC,EAAOC,EAgCpGC,kBA2aLC,SAAP,kBAAgBC,UACVb,IACJF,EAAOe,GAAQhB,IACXF,KAAmBC,OAAOkB,WAC7Bb,EAAOL,OACPM,EAAOY,SACPX,EAASD,EAAKa,gBACdX,EAAQF,EAAKc,MAEVlB,IACHO,EAAWP,EAAKmB,MAAMC,QACtBZ,EAASR,EAAKmB,MAAME,MACpBV,EAAQX,EAAKsB,UAAU,QACvBb,EAAgBT,EAAKe,KAAKQ,UAAUd,cACpCT,EAAKe,KAAKQ,QAAQ,iBAAkBV,gBAEhCP,GAASG,IAEZG,EAAmBH,EAAcM,KAAKH,iBACtCV,EAAe,KAIXA,kKA3BAsB,KAAKC,cAAcC,UAAUC,MAAQ,gDArajCC,cACX1B,GAAgBW,eAAeC,SAASd,IAAS6B,QAAQC,KAAK,8CAC9DF,EAAOJ,KAAKI,KAAOA,GAAQ,GAE3BlB,GAAiBA,EAAcqB,OAC/BrB,EAAgBc,KAWE,SAAjBQ,YAAuBC,EAAQC,QAAQC,GAExB,SAAfC,YAAqBC,EAAQC,MAAMC,SAAW,UAElC,SAAZC,GAAYC,OACPC,EAAQD,EAAQE,WAChBD,IACHA,EAAME,QACNF,EAAMf,MAAQe,EAAMG,KACpBH,EAAMI,OAASJ,EAAMK,OAEtBC,GAAmB,EACnBP,EAAQf,UAAUuB,SAASR,EAAQQ,UAAU,GAErC,SAATC,GAAUC,EAAGC,IACPD,IAAMhB,IAAakB,GAAWD,KAClCE,IAAmBjB,EAAQC,MAAMiB,UAAY,mDAAqDJ,EAAI,WAEtGK,EAAQL,EAAIhB,EACZA,EAAWgB,EACX1C,EAAcgD,YAAchD,EAAcyB,UAGhC,SAAZwB,GAAqBC,UAChBC,UAAUC,QACbR,IAAWlB,GAAYwB,GACvBG,EAAOX,GAAKQ,EACZX,GAAmB,EACnBe,EAAWJ,GACJnC,OAEAW,EAGG,SAAZ6B,GAAYC,GACXC,EAAQR,UAAY,EACpBjD,EAAc0D,aAAaF,EAAEG,SAAYH,EAAEG,SAAWC,GAAsBC,EAAKC,SAASN,EAAEG,QAAQ,EAAO,iBAC3GC,EAAmBJ,EAAEG,OAEG,SAAzBI,GAA0BC,OACrBC,EAAMC,EAAOC,EAAKC,EACtBC,EAAQC,QAAQ,SAAAC,GACfN,EAAOM,EAAGN,KACVG,EAAUG,EAAGH,QACbJ,EAASM,QAAQ,SAAAE,GACXA,EAAKxC,UAAYuC,EAAGvC,SAAWwC,EAAKC,kBAAoBF,EAAGvC,SAAYuC,IAAOC,IAClFN,EAAQM,EAAKN,MACbC,GAAOD,EAAQK,EAAGL,MAAQK,EAAGG,QAAUH,EAAGI,OAAST,EAAQK,EAAGL,OAE9DD,EAAKK,QAAQ,SAAAM,UAAKT,GAAOS,EAAEC,SAAWN,EAAGI,MAAQC,EAAEC,WACnDL,EAAKM,aAAaZ,EAAQC,EAAKK,EAAKO,IAAMZ,GAC1CK,EAAKQ,aAAeZ,EAAQa,KAAK1F,EAAK2F,YAAY,CAACV,EAAKQ,YAAaR,EAAKW,WAAY,IAAK,OACvFX,EAAKY,KAAkB,EAAXZ,EAAKO,MACpBZ,EAAMK,EAAKO,IAAMP,EAAKN,MACtBD,EAAKgB,KAAK,CAACf,MAAOM,EAAKN,MAAOa,IAAKP,EAAKO,IAAKF,SAAUV,EAAKK,KAAMA,IAClED,EAAGO,aAAaP,EAAGL,MAAOK,EAAGQ,IAAMZ,GACnCI,EAAGpD,KAAKkE,UAAUd,SAMX,SAAZc,KACC1D,KACA2D,sBAAsB3D,IAClB0C,IACHA,EAAQC,QAAQ,SAAAC,OACXL,EAAQK,EAAGL,MACda,EAAMR,EAAGgB,KAAOC,KAAKC,IAAIzF,EAAc0F,UAAUnB,EAAGoB,UAAWpB,EAAGQ,KAAOb,GAASK,EAAGQ,IAAMb,GAASK,EAAGI,MACvGD,GAAUK,EAAMR,EAAGQ,KAAO,EAC3Bb,GAASQ,EACTK,GAAOL,EACPH,EAAGG,OAASA,GAAU,KACtBH,EAAGN,KAAKb,OAAS,EACjBmB,EAAGO,aAAaU,KAAKC,IAAIvB,EAAOa,GAAMS,KAAKI,IAAI1B,EAAOa,IACtDR,EAAGpD,KAAKkE,UAAUd,KAEnBR,GAAuB/D,EAAc6F,SAEtCrE,EAAQsE,QAEQ,SAAjBC,YAAuB1B,GAAWA,EAAQC,QAAQ,SAAAC,UAAMA,EAAGpD,KAAKkE,UAAUd,KAC1D,SAAhByB,YACC3B,GAAWA,EAAQC,QAAQ,SAAAC,UAAMA,EAAGpD,KAAK8E,cAAc1B,KAChDwB,GAEY,SAApBG,GAAqBC,EAAMjD,EAAOkD,EAAOC,UACjC,eACFC,EAAsB,mBAAXpD,EAAwBA,EAAMkD,EAAOC,GAAMnD,SAC1DoD,GAAW,IAANA,IAAYA,EAAID,EAAGE,aAAa,QAAUJ,KAAmB,UAATA,EAAmB,EAAI,IAChFE,EAAGG,aAAa,QAAUL,EAAMG,GACnB,SAANA,EAAeA,EAAIG,WAAWH,IAGxB,SAAfI,GAAgBL,EAAIM,EAAOC,EAAKR,GAMV,SAApBS,KACCF,EAAQG,IACRF,EAAMG,IACNpC,EAAQ8B,WAAWE,IAAU,EAE7BK,GADAC,EAAsB,SAAVN,GACiB,EAAI,GACjC1E,GAASA,EAAMX,OACfW,EAAQ2E,GAAOrH,EAAK2H,GAAGb,EAAI,CAACc,KAAMjH,EAAOkH,WAAW,EAAO1E,EAAG,MAAO2E,SAAUT,IAC3ErC,IACHA,EAAGI,MAAQA,EACXJ,EAAG0C,UAAYA,GAGR,SAATK,KACCC,EAAM7E,EAAI8E,EAAS,KACnBD,EAAME,gBAAgB,GACtBZ,KAKc,SAAfa,GAAeC,MACVV,EAAW,CACdK,SACI/B,EAvKM,SAAhBqC,cAAiBvB,EAAI7D,OAQnBmC,EAAOkD,EAPJC,EAASzB,EAAG0B,YAAcnI,EAC7BoI,EAAK3B,EAAG4B,wBACRC,EAAKJ,EAAOG,wBACZE,EAASD,EAAGE,IAAMJ,EAAGI,IACrBC,EAAYH,EAAGI,OAASN,EAAGM,OAC3BC,GAAU/C,KAAKgD,IAAIL,GAAU3C,KAAKgD,IAAIH,GAAaF,EAASE,IAAc,EAAI7F,GAC9EkC,GAAU6D,EAAS/F,SAEP,EAAT+F,IAGH7D,KADAmD,EAAwB,KADxBlD,EAAQuD,EAAGO,QAAU/I,EAAKgJ,YAAcR,EAAGO,SACD,EAAZP,EAAGO,OAAsE,EAAzDjD,KAAKC,IAAIyC,EAAGO,QAASF,EAAS5D,GAAS,EAAIA,EAAQ,KACxE,EACzB4D,GAAUV,GAEJ,CAACU,OAAAA,EAAQ7D,OAAAA,GAwJAkD,CAAcvB,EAAItG,EAAO,EAAG,GAAI4H,EAAKzD,OAASyD,EAAK5C,IAAM4C,EAAKzD,SACzEqE,EAAShD,EAAKgD,OACdI,EAAUpD,EAAKb,YAEf6D,GAAUZ,EAAK5C,IAAM4C,EAAKzD,QAAU,EAAIS,GACxCgE,EAAU,EAEX1E,EAAKK,QAAQ,SAAAM,UAAK2D,GAAU3D,EAAEC,UAAY,EAAIF,KAC9CgD,EAAKxG,KAAKyH,SAASjB,GACnB1F,GAASA,EAAMO,SAAS,OAlCzBmC,EAAOJ,EAAI0C,EAAWhF,EAAO+E,EAAgB2B,EAJ1C7B,EAAWZ,GAAkB,QAASS,EAAOP,EAAOC,GACvDU,EAASb,GAAkB,MAAOU,EAAKR,EAAOC,GAC9CmB,EAASjI,EAAKsJ,YAAYxC,EAAI,KAC9BkB,EAAQlB,EAAGyC,MAoBX7E,EAAO,GACPG,EAAU,GACVmE,EAAS,SAeV1B,MACc,IAAVlC,GAAesC,GAAahF,KAiD/ByF,GAhDAnD,EAAKvE,EAAc+I,OAAO,CACzB/G,QAASiF,EAAYZ,EAAG0B,WAAa1B,EACrCV,SAAUlC,EACVxB,OAAO,EACP+G,iBAAkB,IAClB/C,cAAeqB,GACfjC,UAAWqC,GACXuB,OAAQ,gBAAAtB,OACHuB,EAAI7E,EAAQ8E,QAAQxB,GACnB,GAALuB,GAAU7E,EAAQ+E,OAAOF,EAAG,IAE7BN,SAAU,kBAAAjB,OAIRvC,EAAKiE,EAAStE,EAHXrC,EAAI8E,EAASe,GAAUZ,EAAKnF,SAAWwE,GAC1CkC,EAAIjF,EAAKb,OACTkG,EAAS,KAEN3B,EAAKjD,OAAQ,IACZwE,EAAG,KACNG,GAAWhG,EAAOX,EAClBqC,EAAM4C,EAAK5C,IACJmE,KAAK,KACX9D,EAAMnB,EAAKiF,IACH1E,KAAK+E,UAAaF,GAAWjE,EAAIlB,OAASmF,GAAWjE,EAAIL,gBAC5D9C,IACHmD,EAAIZ,KAAKhC,UAAY4C,EAAIZ,KAAKgF,UAAY,EAAI,MAAS,KACvDpE,EAAIZ,KAAK/C,OAAO,EAAG,EAAG,GACtBQ,EAAMwH,QAAQ,IAAKhD,WAAWc,EAAM7E,IAAKK,GAAO,GAChD2G,GAAgBzH,EAAMO,SAAS,KAIhC6G,EAAUjE,EAAIL,MAASuE,GAAUlE,EAAIP,UACtCE,GAAOK,EAAIP,SAEZnC,EAAI8E,EAAS8B,EAASf,IAAYhJ,EAAKmB,MAAME,MAAM+G,EAAKzD,MAAOyD,EAAK5C,IAAKsE,GAAW1B,EAAKzD,MAAQoF,IAAWvE,EAAM4C,EAAKzD,OAAU8C,GAElItE,EAzNE,SAATiH,OAASzG,UAASsC,KAAKoE,MAAc,IAAR1G,GAAkB,KAAU,EAyN9CyG,CAAOjH,EAAIiG,GACfvE,EAAQhB,SAAW6D,GAAa7C,EAAQE,QAAQ,SAAAuF,UAAUA,EAAOnH,EAAI4G,KACjErH,GACHA,EAAMwH,QAAQ,IAAK/G,GAAIK,GAAO,GAC9B2G,GAAgBzH,EAAMO,SAAS,KAE/B+E,EAAM7E,EAAIA,EAAI,KACd6E,EAAME,gBAAgB,SAM1BlI,EAAKe,KAAKwJ,SAASvF,EAAGvC,SAAS+H,SAAW/D,GAC1CzB,EAAGiD,OAASA,EACZjD,EAAGN,KAAOA,EACVM,EAAGH,QAAUA,EACbG,EAAGI,MAAQA,EACXJ,EAAG0C,UAAYA,EACfZ,EAAGxE,MAAMmI,WAAa,aAEhBzF,MA3ML3C,EAAS6B,EAASgF,EAAQwB,EAAQ5F,EAAS6F,EAAYC,EAAYC,EAAYxH,EAAQyH,EAY1F9H,EA8BAqB,EAzCAN,EAAatD,EAAcsK,cAAc5K,GACzCmD,EAA2C,IAA1B7C,EAAcuK,SAAsC,IAArBpJ,EAAKqJ,YAAuB,GAAM/D,WAAWtF,EAAKqJ,cAAgB,EAAsB,IAAhBrJ,EAAKsJ,SAAgC,IAAhBtJ,EAAKsJ,OAAoB,EAAIhE,WAAWtF,EAAKsJ,SAAW,GACrM/I,EAAW,EACXqB,EAAQ,EACR2G,EAAe,EACfd,EAAWzH,EAAKyH,SAChB8B,EAASvJ,EAAKuJ,OACdlJ,EAAUrB,EAAiB,GAE3BkD,EAAS,CAACX,EAAG,YA0NLiI,uBACRlC,EAAS7G,EAAQgJ,aACjBhJ,EAAQC,MAAMC,SAAW,UACzBjC,EAAMgC,MAAM4G,OAASA,EAAS,KACvBA,EAAS/I,EAAKgJ,YA1BtB1I,EAAc6K,iBAAiB,UAAWxF,IAC1C9F,EAAKuL,YAAY,GAAK,kBAAMpB,EAAe,SAEtCzG,UAAYA,QAEZa,SAAW,SAACH,EAAQ8G,EAAQM,OAC5BnG,EAAIrF,EAAKmB,MAAME,MAAM,EAAGZ,EAAc0F,UAAUhG,GAAOsL,MAAMrH,GAAUE,EAAKa,OAAOf,EAAQoH,IAAapH,GAC3G8G,EAAwB7H,EAASrD,EAAK2H,GAAGrD,EAAM,CAACwD,SAAUxE,EAAgBI,UAAW2B,EAAGwC,UAAW,OAAQD,KAAMjH,IAAUoD,EAAWsB,GAA7H3B,GAAU2B,SAGhBF,OAAS,SAACf,EAAQoH,GACtBpH,EAAS7D,EAAS6D,GAAQ,OAGzBjB,EAFGuI,EAAO1L,EAAKsJ,YAAYlF,EAAQ,KACnCY,EAAKvE,EAAc+I,OAAO,CAAC/G,QAAS2B,EAAQO,MAAO6G,GAAY,mBAEhE1G,GAAWN,GAAuB,CAACQ,IACnC7B,EAAI6B,EAAGL,MACPK,EAAGjD,MAAK,GACR/B,EAAK2L,IAAIvH,EAAQ,CAACjB,EAAGuI,IACdvI,QAUHd,QAAU,SAASuJ,UACnBhI,UAAUC,QACbxB,EAAU9B,EAASqL,GAAW,mBAAmB,IAAMtL,EAAMuL,SAAS,GACtEhB,EAAaxI,EAAQ2E,aAAa,UAAY,GAC9ChH,EAAK2L,IAAItJ,EAAS,CAACE,SAAU,UAAWuJ,MAAO,SACxCtK,MAEDa,QAGH6B,QAAU,SAAS0H,UACnBhI,UAAUC,QACbK,EAAU3D,EAASqL,GAAW,mBAAmB,IAxQ5C,SAARG,MAAQjF,OACH5C,EAAU9D,EAAK4L,cAAc,cACjC9H,EAAQ+H,UAAUC,IAAI,0BACtBpF,EAAG0B,WAAW2D,aAAajI,EAAS4C,GACpC5C,EAAQkI,YAAYtF,GACb5C,EAmQkD6H,CAAM1J,GAC7DuI,EAAa1G,EAAQ8C,aAAa,UAAY,GAC9CoE,gBACApL,EAAK2L,IAAIzH,EAASZ,EAAiB,CAACf,SAAU,SAAUiJ,SAAU,QAAStC,OAAQ,OAAQ4C,MAAO,OAAQjD,IAAK,EAAGwD,KAAM,EAAGC,MAAO,EAAGvD,OAAQ,GAAK,CAACxG,SAAU,UAAWiJ,SAAU,WAAYM,MAAO,OAAQ5C,OAAQ,OAAQL,IAAK,OAAQE,OAAQ,OAAQsD,KAAM,OAAQC,MAAO,SACxQ9K,MAED0C,QAGHY,QAAU,SAACyH,EAASC,MACZ1H,EAAZA,GAAsB,IACjByH,SACGzH,EAAQ2H,MAAM,IAEtBF,EAAUhM,EAASgM,IACXxH,QAAQ,SAAAX,WACXuF,EAAI7E,EAAQjB,OACT8F,KACF7E,EAAQ6E,GAAGlH,UAAY2B,IAC1BU,EAAQ6E,GAAG5H,OACX+C,EAAQ+E,OAAOF,EAAG,MAIrB6C,EAASA,GAAU,OAGlB7C,EAAG3E,EAFCoC,EAAcoF,EAAdpF,MAAOC,EAAOmF,EAAPnF,IACXqF,EAAe,OAEX/C,EAAI,EAAGA,EAAI4C,EAAQ1I,OAAQ8F,KAC/B3E,EAAKmC,GAAaoF,EAAQ5C,GAAIvC,EAAOC,EAAKsC,KACpC+C,EAAahH,KAAKV,UAEzBF,EAAQY,WAARZ,EAAgB4H,GACTA,QAGHrK,QAAQT,EAAKS,cACb6B,QAAQtC,EAAKsC,cACbhB,OAAS,SAAAC,UAAKD,GAAOC,GAAW,IAANA,EAAUA,EAAIhB,SACxCwK,YAAc,kBAAM1K,EAAQ0K,aAAaxK,IAE9C1B,EAAcmM,cAAc1I,EAAS,CACpCR,UAAWA,GACXmJ,aAAc,+BAAMvM,EAAMuM,cAC1BC,cAAoC,IAAtBlL,EAAKkL,gBAA4BxJ,EAC/CjB,QAASA,EACTqG,6DACQ,CAACG,IAAK,EAAGwD,KAAM,EAAGP,MAAO3L,EAAK4M,WAAY7D,OAAQ/I,EAAKgJ,gBAGhE1I,EAAcuM,SAAS,CAAC5G,SAAUlC,QAC9B+I,EAAyBxM,EAAcyM,SAASC,OAAO,SAAAnI,UAAMA,EAAGoB,WAAajG,GAAQ6E,EAAGoB,WAAalC,IACzG+I,EAAuBlI,QAAQ,SAAAC,UAAMA,EAAG+C,QAAO,KAE/C2C,EAASjK,EAAc+I,OAAO,CAC7B9H,UAAW1B,EAAK2H,GAAG7D,EAAQ,CAC1BX,EAAG,oBAAMhD,EAAKgJ,YAAcD,GAC5BtB,KAAM,OACNwF,KAAM,iBACNtF,SAAU,IACVuB,SAAU,wBACLjG,EAAQJ,EACRI,IACHU,EAAOX,EAAIhB,EACXK,GAAUkI,IAEXxH,GAAOY,EAAOX,EAAGC,GACjBpB,KACAqH,IAAahG,GAAUgG,EAAS/E,MAGlCoC,cAAe,gCAAM5C,EAAOX,EAAI,GAChCkK,GAAI,iBACJjH,SAAUjG,EACVmN,qBAAqB,EACrB3I,MAAO,EACP8E,iBAAkB,KAClBjE,IAAK4F,cACLmC,gBAAiB,2BAChBtL,EAAQsE,QACR4E,GAAUA,EAAO7G,IAElB5B,MAAOY,IAAkB,EACzBwC,UAAW,mBAAAsC,GACV5F,GAAU4F,GACVlF,GAAOY,EAAOX,WAIX+H,OAAS,SAASvH,UACtBL,EAAiBK,EACVC,UAAUC,OAAS6G,EAAO8C,cAAc7J,GAAS+G,EAAO/H,WAAa+H,EAAO/H,WAAWmF,WAAa,GAG5G4C,EAAO/H,aAAe+H,EAAO/H,WAAWf,KAAKgG,KAAOhG,EAAKgG,MAAQjH,QAE5Dc,cAAgBiJ,EAErB9I,EAAKkD,SAAWtD,KAAKsD,SAAyB,IAAjBlD,EAAKkD,QAAmB,2BAA6BlD,EAAKkD,QAAS,IAEhGmI,EAAuBlI,QAAQ,SAAAC,GAC9BA,EAAGpD,KAAKwE,SAAWlC,EACnBc,EAAGyI,KAAKzI,EAAGpD,KAAMoD,EAAGtD,kBAGhB2B,OAAS,SAASM,UAClBC,UAAUC,UACPR,IAAWM,IACZA,GACH+G,EAAO/H,YAAc+H,EAAO/H,WAAWC,QACvCmB,GAAY5B,GACZF,EAAQsE,SACRuE,EAAmBrK,EAAciN,oBACb5C,EAAiB6C,UACrCtK,EAAS5C,EAAcmN,QAAQ,CAC9BC,gBAAgB,EAChBC,KAAM,qBACNC,UAAU,EACVC,UAAW,4BAAMtK,IAAWvB,QAG7BkB,EAAOtB,OACPsB,EAAS,EACTyH,GAAoBA,EAAiBmD,SACrCvD,EAAOzH,WAAad,EAAWuI,EAAO/F,QAAU+F,EAAOlF,IAAMkF,EAAO/F,OACpEnC,GAAUkI,KAGLlJ,QAEC6B,QAGLtB,KAAO,WACXuC,EAAKjB,QAAO,GACZb,GAAUkI,GACVA,EAAO3I,eACH4H,EAAI7E,EAAUA,EAAQjB,OAAS,EAC5B8F,KACN7E,EAAQ6E,GAAG5H,OAEZtB,EAAcmM,cAAc1I,GAC5BzD,EAAcyN,oBAAoB,UAAWpI,IAC7C5B,EAAQ5B,MAAM6L,QAAUvD,EACxBvI,EAAQC,MAAM6L,QAAUtD,MACpBmC,EAAWvM,EAAcuM,SAAS,IACtCA,GAAYA,EAAS5G,WAAalC,GAAWzD,EAAcuM,SAAS,CAAC5G,SAAUjG,IAC/EmE,EAAK8J,UAAY3N,EAAciN,iBAAgB,GAC/CW,cAAc1D,GACdjK,EAAgB,KAChBP,EAAK+N,oBAAoB,UAAWlK,KAGrCpC,EAAK8L,kBAAoBlM,KAAK4M,SAAW3N,EAAciN,gBAAgB,CAAEK,UAAU,KACnFtN,EAAc+L,OAAO5K,0BACIzB,EAAKmO,iBAAiBhO,IAAWN,EAAK2L,IAAIrL,EAAO,CAACiO,mBAAoB,SAG/FpO,EAAKmL,iBAAiB,UAAWtH,IAEjC2G,EAAa6D,YAAYxM,GAAgB,KAErB,YAApB5B,EAAKqO,YAA4B1I,sBAAsB,kBAAMtF,EAAciO,YAsC7E7N,EAAe8N,QAAU,SACzB9N,EAAe2I,OAAS,SAAA5H,UAASlB,GAAiBkB,GAAQlB,EAAc2B,YAAc9B,EAASqB,EAAKS,SAAS,GAAM3B,EAAgB,IAAIG,EAAee,IACtJf,EAAe+N,IAAM,kBAAMlO,GAE3BX,KAAcC,EAAKC,eAAeY"}